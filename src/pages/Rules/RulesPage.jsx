import { useNavigate } from 'react-router-dom'
import { useState } from 'react'

export default function RulesPage() {
  const navigate = useNavigate()
  const [lang, setLang] = useState('en') // 'en' | 'ru'

  const t = (key) => {
    const dict = {
      en: {
        title: 'How to play',
        back: 'Back',
        basics: 'Basics',
        basicsItems: [
          'Choose gifts (your stake) and create a battle or join one.',
          'Each game is 1v1. You and your opponent hide 1 gift on a 4x4 grid.',
          'Take turns to guess the opponent‚Äôs cell. Hit to win the round.',
        ],
        timing: 'Timing',
        timingItems: [
          'Placing phase: limited time to pick your secret cell.',
          'Turns: 25 seconds per move, +3 seconds bonus for each move.',
          'If you disconnect, you have ~30 seconds to reconnect.',
        ],
        stakes: 'Stakes and rewards',
        stakesItems: [
          'You must stake gifts to create or join a battle.',
          'Winner receives the opponent‚Äôs staked gifts.',
          'Commission: 0.4 TON per game.',
        ],
        fair: 'Fair play',
        fairItems: [
          'One device per player: if you connect from another device, old sessions are disconnected.',
          'Session expires after inactivity. Stay active during your games.',
        ],
        notes: 'Notes',
        notesItems: [
          'Names and labels are subject to change.',
          'Rules may update; watch for in-app notices.',
        ],
      },
      ru: {
        title: '–ö–∞–∫ –∏–≥—Ä–∞—Ç—å',
        back: '–ù–∞–∑–∞–¥',
        basics: '–û—Å–Ω–æ–≤—ã',
        basicsItems: [
          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ (–≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞) –∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–∏—Ç–≤—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥–æ—Ç–æ–≤–æ–π.',
          '–ò–≥—Ä–∞ 1 –Ω–∞ 1. –í—ã –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä—è—á–µ—Ç–µ –ø–æ 1 –ø–æ–¥–∞—Ä–∫—É –Ω–∞ –ø–æ–ª–µ 4√ó4.',
          '–•–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏: —É–≥–∞–¥—ã–≤–∞–π—Ç–µ —è—á–µ–π–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ü–æ–ø–∞–ª ‚Äî —Ä–∞—É–Ω–¥ –∑–∞ –≤–∞–º–∏.',
        ],
        timing: '–¢–∞–π–º–∏–Ω–≥–∏',
        timingItems: [
          '–§–∞–∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–∏.',
          '–•–æ–¥: 25 —Å–µ–∫—É–Ω–¥ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –∑–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥ +3 —Å–µ–∫—É–Ω–¥—ã –±–æ–Ω—É—Å.',
          '–ü—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å—Ç—å ~30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.',
        ],
        stakes: '–°—Ç–∞–≤–∫–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã',
        stakesItems: [
          '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å/–≤–æ–π—Ç–∏ –≤ –±–∏—Ç–≤—É, –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏.',
          '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º –ø–æ–¥–∞—Ä–∫–∏.',
          '–ö–æ–º–∏—Å—Å–∏—è: 0.4 TON –∑–∞ –∏–≥—Ä—É.',
        ],
        fair: '–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞',
        fairItems: [
          '–û–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞: –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–∂–Ω—è—è —Å–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.',
          '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –±—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.',
        ],
        notes: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
        notesItems: [
          '–ù–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.',
          '–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
        ],
      },
    }
    const d = dict[lang]
    return d[key]
  }

  return (
    <div className="max-w-[390px] w-full mx-auto text-white">
      {/* Top bar */}
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-xl font-semibold">{t('title')}</h1>
        <div className="flex items-center gap-2">
          {/* Local RU/EN switch only for Rules */}
          <div className="h-8 p-0.5 rounded-lg bg-neutral-800 border border-neutral-700 flex items-center">
            <button
              onClick={() => setLang('en')}
              className={[
                'px-2 h-7 rounded-md text-xs',
                lang === 'en' ? 'bg-neutral-700 text-white' : 'text-white/70'
              ].join(' ')}
              aria-pressed={lang === 'en'}
              type="button"
            >EN</button>
            <button
              onClick={() => setLang('ru')}
              className={[
                'px-2 h-7 rounded-md text-xs',
                lang === 'ru' ? 'bg-neutral-700 text-white' : 'text-white/70'
              ].join(' ')}
              aria-pressed={lang === 'ru'}
              type="button"
            >RU</button>
          </div>
          <button
            onClick={() => navigate(-1)}
            className="px-3 py-1.5 rounded-lg bg-neutral-800 border border-neutral-700 text-sm"
          >{t('back')}</button>
        </div>
      </div>

      <div className="space-y-4 text-sm text-neutral-200">
        <RuleCard title={t('basics')} icon="üéØ" items={t('basicsItems')} />
        <RuleCard title={t('timing')} icon="‚è±Ô∏è" items={t('timingItems')} />
        <RuleCard title={t('stakes')} icon="üèÜ" items={t('stakesItems')} />
        <RuleCard title={t('fair')} icon="ü§ù" items={t('fairItems')} />
        <RuleCard title={t('notes')} icon="üìù" items={t('notesItems')} />
      </div>
    </div>
  )
}

function RuleCard({ title, items = [], icon }) {
  return (
    <section className="p-3 rounded-xl bg-[radial-gradient(ellipse_100%_100%_at_50%_0%,_#222222_0%,_#111111_100%)] border border-neutral-700/60 overflow-hidden">
      <div className="flex items-center gap-2 mb-2">
        {icon && <span className="text-lg" aria-hidden>{icon}</span>}
        <h2 className="text-base font-semibold">{title}</h2>
      </div>
      <ul className="list-disc pl-5 space-y-1">
        {Array.isArray(items) && items.map((line, idx) => (
          <li key={idx}>{line}</li>
        ))}
      </ul>
    </section>
  )
}
